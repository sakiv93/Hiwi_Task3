# ABAQUS Umgebungsdatei: Version 6.12-3
# Aenderungen: 
# 120105, Roth: multiprocessing
#
#        System-Wide Abaqus Environment File
#       -------------------------------------
standard_parallel = ALL
mp_mode = MPI
mp_file_system = (DETECT,DETECT)
mp_num_parallel_ftps = (4, 4)
mp_environment_export = ('MPI_PROPAGATE_TSTP',
                         'ABA_CM_BUFFERING',
                         'ABA_CM_BUFFERING_LIMIT',
                         'ABA_ITERATIVE_SOLVER_VERBOSE',
                         'ABA_DMPSOLVER_BWDPARALLELOFF',
                         'ABA_ELP_SURFACE_SPLIT',
                         'ABA_ELP_SUSPEND',
                         'ABA_HOME',
                         'ABA_MEMORY_MODE',
                         'ABA_MPI_MESSAGE_TRACKING',
                         'ABA_MPI_VERBOSE_LEVEL',
                         'ABA_PATH',
                         'ABA_RESOURCE_MONITOR',
                         'ABA_RESOURCE_USEMALLINFO',
                         'ABAQUS_LANG',
                         'ABAQUSLM_LICENSE_FILE',
                         'ABQ_CRTMALLOC',
                         'ABQ_DATACHECK',
                         'ABQ_RECOVER',
                         'ABQ_RESTART',
                         'ABQ_SPLITFILE',
                         'ABQ_XPL_WINDOWDUMP',
                         'ABQ_XPL_PARTITIONSIZE',
                         'ABQLMHANGLIMIT',
                         'ABQLMQUEUE',
                         'ABQLMUSER',
                         'CCI_RENDEZVOUS',
                         'DOMAIN',
                         'DOMAIN_CPUS',
                         'DOUBLE_PRECISION',
                         'FLEXLM_DIAGNOSTICS',
                         'FOR0006',
                         'FOR0064',
                         'FOR_IGNORE_EXCEPTIONS',
                         'FOR_DISABLE_DIAGNOSTIC_DISPLAY',
                         'LD_PRELOAD',
                         'MP_NUMBER_OF_THREADS',
                         'MPC_GANG',
                         'MPI_FLAGS',
                         'MPI_RDMA_NENVELOPE',
                         'MPI_SOCKBUFSIZE',
                         'MPI_USE_MALLOPT_MMAP_MAX',
                         'MPI_USE_MALLOPT_MMAP_THRESHOLD',
                         'MPI_USE_MALLOPT_SBRK_PROTECTION',
                         'MPI_WORKDIR',
                         'MPCCI_SERVER',
                         'MPCCI_INITIAL_EXCHANGE',
                         '_MPCCI_CCM_CODE_IDS',
                         '_MPCCI_CODE_IDSTRING',
                         'ABAQUS_CCI_DEBUG',
                         'NCPUS',
                         'OMP_DYNAMIC',
                         'OMP_NUM_THREADS', 
                         'OUTDIR',
                         'PAIDUP',
                         'PARALLEL_METHOD',
                         'RAIDEV_NDREG_LAZYMEM',
                         'ABA_SYMBOLIC_GENERALCOLLAPSE',
                         'ABA_SYMBOLIC_GENERAL_MAXCLIQUERANK',
                         'ABA_ADM_MINIMUMINCREASE',
                         'ABA_ADM_MINIMUMDECREASE',
                         'IPATH_NO_CPUAFFINITY',
                         'MALLOC_MMAP_THRESHOLD_',
                         'ABA_EXT_SIMOUTPUT',
			 'SMA_WS',
			 'SMA_PARENT',
			 'SMA_PLATFORM',
                         'ABA_PRE_DECOMPOSITION')

import driverUtils, os
#
# Linux (Opteron/EM64T) Settings:
#
# Compile and Link command for user subroutines.
# Compile_cpp and link_exe for Abaqus make utility.
#
import os, re, glob, driverUtils

# Always use the newest version
fortDefPath = '/'
ccDefPath = '/'

dirLst = glob.glob('/opt/intel/fce/10.1*')
if dirLst:
    dirLst.sort()
    fortDefPath = dirLst[-1] + '/bin'

dirLst = glob.glob('/opt/intel/cce/10.1*')
if dirLst:
    dirLst.sort()
    ccDefPath = dirLst[-1] + '/bin'

fortCompiler = "ifort"
cppCompiler = "icpc"

if os.path.exists(os.path.join(fortDefPath, fortCompiler)):
    fortCmd = os.path.join(fortDefPath, fortCompiler)
else:
    fortCmd = fortCompiler

if os.path.exists(os.path.join(ccDefPath, cppCompiler)):
    cppCmd = os.path.join(ccDefPath, cppCompiler)
else:
    cppCmd = cppCompiler

# Avoid signal trapping by the Fortran RTE
os.environ["FOR_IGNORE_EXCEPTIONS"] = "T"
# Disable messages from the Fotran RTE
os.environ["FOR_DISABLE_DIAGNOSTIC_DISPLAY"] = "T"

# Turn off use of ACML on AMD processors.
os.environ["ABQ_USE_ACML"] = "0"

# Do not let QLogic InfiniPath driver set processor affinity.
os.environ["IPATH_NO_CPUAFFINITY"] = "1"

# Add the flag "-free" to the compile_fortran command below to use free-
# format FORTRAN 90 syntax.


# Aenderung Huetter/Roth 05.01.2012: -openmp statt -auto 
#compile_fortran = [fortCmd, '-c', '-fPIC', '-auto', '-mP2OPT_hpo_vec_divbyzero=F', '-extend_source', '-w90', '-w95', '-WB', '-I%I']
compile_fortran = [fortCmd, '-c', '-fPIC', '-openmp', '-mP2OPT_hpo_vec_divbyzero=F', '-extend_source', '-w90', '-w95', '-WB', '-I%I']


compile_cpp = [cppCmd,
               '-c', '-cxxlib', '-Kc++eh', '-fPIC',
               '-Krtti', '-Kc++', '-pc64', '-restrict', '-DABQ_LINUX', '-DABQ_LNX86_64',
               '-DFOR_TRAIL', '-DHAS_BOOL', '-DASSERT_ENABLED', '-D_BSD_TYPES',
               '-D_BSD_SOURCE', '-D_GNU_SOURCE', '-D_POSIX_SOURCE',
               '-D_XOPEN_SOURCE_EXTENDED', '-D_XOPEN_SOURCE', '-DHAVE_OPENGL',
               '-DHKS_OPEN_GL', '-DTYPENAME=typename', '-DGL_GLEXT_PROTOTYPES',
               '-D_LARGEFILE64_SOURCE', '-D_FILE_OFFSET_BITS=64', '-we1011', '-we120',
               '-we117', '-we556', '-we144', '-we268', '-we1224', '-we167', '-we880', '-O0', '-I%I']

link_sl = [fortCmd,
           '-cxxlib', '-fPIC', '-threads', '-shared',
           '%E', '-Wl,-soname,%U', '-o', '%U', '%F', '%A', '%L', '%B', '-parallel', '-Wl,-Bdynamic',
           '-i-dynamic', '-lifport', '-lifcoremt']

link_exe = [cppCmd,
            '-cxxlib', '-fPIC',
            '-Wl,-Bdynamic', '-i-dynamic', '-o', '%J', '%F', '%M', '%L', '%B', '%O', '-lpthread']

mp_mpi_implementation = PMPI
pmpipath = driverUtils.locateFile(os.environ.get('ABA_PATH', ''), 'pmpi-8.1.2/bin', 'mpirun')
mp_mpirun_path = {PMPI: pmpipath}
mp_rsh_command = 'ssh -n -l %U %H %C'

# Remove the temporary names from the namespace
del cppCmd
del fortCmd
del ccDefPath
del cppCompiler
del fortDefPath
del fortCompiler
del pmpipath
del dirLst


graphicsEnv = driverUtils.locateFile(os.environ['ABA_PATH'],'site','graphicsConfig','env')
if graphicsEnv:
    execfile(graphicsEnv)
else:
    raise 'Cannot find the graphics configuration environment file (graphicsConfig.env)'

del driverUtils, os, graphicsEnv
license_server_type=FLEXNET

abaquslm_license_file="25000@license4.imfd.tu-freiberg.de:25000@license5.imfd.tu-freiberg.de:25000@license6.imfd.tu-freiberg.de"

doc_root="http://winserv.imfd.tu-freiberg.de:2080/v6.12"
doc_root_type="html"
academic=RESEARCH

## Aenderung Roth 03.04.2012:
# Ort fuer shared library
import os
usub_lib_dir = os.getcwd()

